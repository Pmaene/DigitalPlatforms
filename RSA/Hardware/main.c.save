// Result at 0200:0280
// Should be 2C2BBB0280627C28795DDC726CFAB231C7E47FB3BC7937CB0CE8B54E103A0FFB809428DA0E96078C12B3CB2E8F081EAB9A33862F6CA12B077F3913A6FE007C2F64AD9D9136B86499E74E2CCB030E2DF745B89AE9D20C7B9887B921198AAC8D079ACB241DE56161A6B01988FC9BEB8053FA0179AA40A3C85BA1525E56BEC08C05
// With wordlength of 2ยน 4A53783F8F862AC5DABFAD9C7379ABC2F3287B4971DE45754BF31B27BF0FD77DECE2B39F1B4EFA7E8CBB87780C33B4183599FEBFD02A16DD82FE6D6B0D24649F901657C072FF18302A15BCF7A5DF000CBB1E2043B2D357AA8278EF51D1683DF291E5620EF516E93A37261A6B5EC577C46AADC7DAB7A84D111FC08AA8A6AEFC1Df

#include <8051.h>
#define SIZE 128

enum {ins_idle, ins_write_data, ins_montgomery, ins_read_r, ins_ack};

volatile __xdata __at (0x0000) unsigned char rmodm[SIZE]  = {0xEA,0xCF,0xBE,0xC1,0x80,0x10,0xEA,0x1B,0xA6,0xCD,0x50,0x4D,0x92,0x9E,0xEA,0x53,0xAC,0x79,0x45,0x34,0x3D,0x31,0xDF,0x24,0xA4,0x19,0x11,0x2A,0xFD,0x73,0x15,0x2A,0x8F,0xF3,0x43,0xAF,0x42,0x3D,0x85,0xF8,0x09,0x44,0xC3,0xFF,0xC7,0xF9,0xDB,0x8F,0x6A,0x1E,0x8D,0xA4,0x23,0x29,0x31,0xD2,0xE9,0x6E,0xBA,0x41,0x51,0xF7,0x83,0x9B,0x27,0x0E,0x5F,0x4D,0x6C,0x7D,0xD2,0x0A,0x1F,0x3A,0x7C,0x4C,0xE4,0x4D,0xFD,0xFC,0xF7,0x61,0xFE,0xE9,0xA4,0xB6,0x56,0xB2,0x7D,0x39,0xD1,0xEA,0x77,0xA3,0x22,0xD0,0xC6,0x4E,0xA4,0x45,0xB3,0xD5,0x63,0x7B,0x1D,0x52,0x4F,0x4C,0x0A,0x28,0xB8,0x3F,0xDB,0x90,0x04,0x5C,0xBE,0x0B,0xAC,0xD2,0x3A,0x71,0x9A,0x76,0x20,0x31,0x46,0x0x}
volatile __xdata __at (0x0080) unsigned char r2modm[SIZE] = {0x0A,0x63,0xE3,0x81,0x66,0xED,0x02,0x40,0x19,0x5C,0x04,0xC7,0x7A,0xF5,0x10,0x96,0xAC,0x2D,0x4B,0xFF,0x6E,0x11,0x58,0x68,0x9D,0xC5,0x6E,0xEB,0x83,0x00,0x29,0xE7,0x7E,0xCD,0x20,0x84,0x5B,0x28,0xA9,0x72,0x53,0x96,0x55,0x2E,0xDE,0x34,0xE0,0x57,0xC8,0x29,0xD5,0xB0,0x44,0xC0,0x5B,0x81,0xBA,0x7B,0xEE,0xB9,0x9E,0x9F,0xF6,0x2A,0x0D,0x45,0x98,0xE5,0xF2,0xC7,0xF2,0x1B,0xD9,0x4C,0xB6,0xF8,0x6E,0x2A,0xA3,0x5D,0x23,0xBF,0x69,0xE9,0x76,0xF4,0x9F,0xFA,0xCC,0xC4,0xCF,0x9F,0x5D,0xBC,0x1C,0xD1,0x47,0x45,0x09,0xBC,0xB4,0x6B,0x3E,0xD8,0x11,0xCF,0xDA,0xBB,0x76,0x35,0x0A,0x43,0xEB,0x7D,0xE2,0x2D,0xA7,0x88,0x6C,0xED,0x0C,0xF4,0x04,0x47,0x56,0x7F,0x50,0x6E}
volatile __xdata __at (0x0100) unsigned char modulus      = {0x5D,0xEF,0x94,0x7C,0x83,0xBF,0x40,0x4D,0xAB,0xD7,0xDF,0xB2,0x4D,0x2B,0x07,0x59,0x1A,0x48,0xAE,0x45,0x17,0x2E,0x6A,0x65,0x01,0x54,0xF5,0xB7,0xDC,0x5D,0x8F,0x4C,0x33,0x84,0x70,0xBB,0x0B,0xA4,0xAC,0x87,0x82,0x1D,0x0D,0x50,0x2D,0x45,0xF9,0xF0,0x11,0x5B,0xC8,0xF9,0x18,0xFB,0xD3,0x6F,0xC3,0x74,0x02,0xAB,0x32,0x46,0x6B,0x52,0x9B,0x71,0xD9,0x21,0x73,0x3A,0xCC,0x6D,0xDB,0x10,0x89,0xCB,0x3B,0x47,0x13,0x0E,0x65,0x86,0x9E,0x7F,0x3E,0x43,0x92,0xFC,0xB6,0x6A,0x6B,0x37,0x90,0xEB,0x4F,0xE9,0xEB,0x9C,0x2F,0x6B,0x26,0xEF,0xB4,0xBB,0xFC,0x3D,0x33,0xFB,0x97,0x67,0x93,0x26,0x96,0x38,0xE5,0xF0,0x3A,0xC6,0xA3,0x95,0xA5,0x98,0xF4,0xB8,0x0B,0x88,0xE1,0xD4}
volatile __xdata __at (0x0180) unsigned char message      = {0x89,0x15,0x30,0x41,0x3E,0x7F,0xEF,0x15,0xE4,0x59,0x32,0xAF,0xB2,0x6D,0x61,0x15,0xAC,0x53,0x86,0xBA,0xCB,0xC2,0xCE,0x20,0xDB,0x5B,0xE6,0xEE,0xD5,0x02,0x8C,0xEA,0xD5,0x70,0x0C,0xBC,0x50,0xBD,0xC2,0x7A,0x07,0xF6,0xBB,0x3C,0x00,0x38,0x06,0x24,0x70,0x95,0xE1,0x72,0x5B,0xDC,0xD6,0xCE,0x2D,0x16,0x91,0x45,0xBE,0xAE,0x08,0x7C,0x64,0xD8,0xF1,0xA0,0xB2,0x93,0x82,0x2D,0xF5,0xE0,0xC5,0x83,0xB3,0x1B,0xB2,0x02,0x03,0x08,0x9E,0x01,0x16,0x5B,0x49,0xA9,0x4D,0x82,0xC6,0x2E,0x15,0x88,0x5C,0xDD,0x2F,0x39,0xB1,0x5B,0xBA,0x4C,0x2A,0x9C,0x84,0xE2,0xAD,0xB0,0xB3,0xF5,0xD7,0x47,0xC0,0x24,0x6F,0xFB,0xA3,0x41,0xF4,0x53,0x2D,0xC5,0x8E,0x65,0x89,0xDF,0xCE,0xB9}
volatile __xdata 

volatile __xdata __at (0x4000) unsigned char shared_a[SIZE];
volatile __xdata __at (0x4080) unsigned char shared_b[SIZE];
volatile __xdata __at (0x4100) unsigned char shared_m[SIZE];

volatile __xdata __at (0x5000) unsigned char r[SIZE+1];

unsigned short i;

void write_montgomery() {
    P1 = 0;
    
    for (i = 0; i < SIZE; i++) {
        shared_a[i] = a[SIZE-1-i];
    }

	for (i = 0; i < SIZE; i++) {
        shared_b[i] = b[SIZE-1-i];
    }

	for (i = 0; i < SIZE; i++) {
        shared_m[i] = m[SIZE-1-i];
    }

    P0 = ins_write_data;
    P0 = ins_idle;

    while (P1 == 0) {}
	P0 = ins_ack;
}

void read_r() {
    P0 = ins_read_r;
    while (P1 == 0) {}
	P0 = ins_ack;

    P0 = ins_idle;
}

void montgomery() {
    P0 = ins_montgomery;
    P0 = ins_idle;
}

void terminate() {
    P3 = 0x55;
}

int main() {
    write_montgomery();
    montgomery();
    read_r();
    
    P1 = 0;

    for (i = 0; i < SIZE; i++) {
        shared_a[i] = r[i];
    }

    P0 = ins_write_data;
    P0 = ins_idle;

    while (P1 == 0) {}
	P0 = ins_ack;

    terminate();
    return 0;
}
